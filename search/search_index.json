{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83c\udf1f Overwrked Public","text":"<p>Welcome to the public documentation hub! This site showcases technical projects, blueprints, and comprehensive guides built with modern development practices.</p>"},{"location":"#featured-projects","title":"\ud83d\ude80 Featured Projects","text":"<ul> <li> <p>\ud83e\udd16 Enterprise Telegram Bot</p> <p>Complete monetization platform with credit systems, admin management, and Stripe integration. Built with Python, PostgreSQL, and Docker.</p> <p>Tech Stack: Python \u2022 PostgreSQL \u2022 Stripe \u2022 Docker \u2022 Railway</p> <p> View Blueprint</p> </li> <li> <p>\ud83d\udcac Paid Messaging System</p> <p>Revolutionary bot that transforms Telegram into a creator monetization platform with thread-based conversations and seamless payments.</p> <p>Features: Credit System \u2022 Real-time Chat \u2022 Analytics Dashboard</p> <p> App Summary</p> </li> </ul>"},{"location":"#documentation-hub","title":"\ud83d\udcda Documentation Hub","text":""},{"location":"#api-reference","title":"\ud83d\udd0c API Reference","text":"<p>Comprehensive API documentation with code examples, authentication guides, and best practices.</p> <ul> <li>Telegram Bot API - Complete reference with Python examples</li> <li>Webhook Configuration - Security and rate limiting</li> <li>Error Handling - Common issues and solutions</li> </ul>"},{"location":"#deployment-guides","title":"\ud83d\ude80 Deployment Guides","text":"<p>Production-ready deployment strategies and DevOps best practices.</p> <ul> <li>Production Deployment - Docker + Railway setup</li> <li>SSL/TLS Configuration - Security and certificates</li> <li>Monitoring &amp; Logging - Health checks and observability</li> </ul>"},{"location":"#database-architecture","title":"\ud83d\uddc4\ufe0f Database Architecture","text":"<p>Scalable PostgreSQL schema with analytics, optimization, and maintenance.</p> <ul> <li>Database Schema - Complete table definitions</li> <li>Performance Optimization - Indexing and query tuning  </li> <li>Analytics Queries - Revenue and engagement metrics</li> </ul>"},{"location":"#technology-stack","title":"\ud83d\udee0\ufe0f Technology Stack","text":"Category Technologies Backend Python 3.11+ \u2022 Flask \u2022 Gunicorn Database PostgreSQL 15+ \u2022 Redis Caching Payments Stripe API \u2022 Webhook Security Deployment Docker \u2022 Railway \u2022 GitHub Actions Monitoring Health Checks \u2022 Error Tracking"},{"location":"#project-highlights","title":"\ud83d\udcca Project Highlights","text":""},{"location":"#performance-metrics","title":"\u26a1 Performance Metrics","text":"<ul> <li>99.9% Uptime - Production-grade reliability</li> <li>&lt;2s Response Time - Optimized message processing  </li> <li>Scalable Architecture - Handles thousands of concurrent users</li> <li>Real-time Processing - Webhook-based event handling</li> </ul>"},{"location":"#security-features","title":"\ud83d\udd10 Security Features","text":"<ul> <li>Encrypted Communications - End-to-end secure messaging</li> <li>Webhook Verification - Stripe signature validation</li> <li>Rate Limiting - Abuse protection and spam prevention</li> <li>Audit Logging - Complete transaction history</li> </ul>"},{"location":"#business-intelligence","title":"\ud83d\udcb0 Business Intelligence","text":"<ul> <li>Revenue Analytics - Monthly growth tracking</li> <li>User Engagement - Retention and activity metrics</li> <li>Payment Processing - Stripe integration with subscriptions</li> <li>Admin Dashboard - Real-time monitoring and management</li> </ul>"},{"location":"#key-principles","title":"\ud83c\udfaf Key Principles","text":""},{"location":"#scalable-architecture","title":"\ud83c\udfd7\ufe0f Scalable Architecture","text":"<p>Modular design with clear separation of concerns, database connection pooling, and horizontal scaling capabilities.</p>"},{"location":"#developer-experience","title":"\ud83d\udd27 Developer Experience","text":"<p>Comprehensive documentation, automated testing, CI/CD pipelines, and infrastructure as code.</p>"},{"location":"#data-driven-decisions","title":"\ud83d\udcc8 Data-Driven Decisions","text":"<p>Built-in analytics, performance monitoring, A/B testing capabilities, and business intelligence dashboards.</p>"},{"location":"#security-first","title":"\ud83d\udee1\ufe0f Security First","text":"<p>Webhook verification, encrypted storage, audit trails, and compliance with industry standards.</p>"},{"location":"#quick-navigation","title":"\ud83d\udd17 Quick Navigation","text":"<ul> <li> <p>\ud83d\udccb Project Blueprints</p> <p>Detailed technical specifications and implementation guides</p> <p> Browse Projects</p> </li> <li> <p>\ud83d\udcd6 API Documentation</p> <p>Complete API reference with examples and best practices</p> <p> View APIs</p> </li> <li> <p>\ud83d\ude80 Deployment Guides</p> <p>Production deployment and DevOps documentation</p> <p> Deploy Now</p> </li> <li> <p>\ud83d\uddc4\ufe0f Database Docs</p> <p>Schema definitions, analytics queries, and optimization</p> <p> Explore Schema</p> </li> </ul> <p>Built with: Material for MkDocs \u2022 Cursor Theme \u2022 Automated CI/CD Last Updated: 2025-01-27 \u2022 Status: \u2705 Production Ready</p>"},{"location":"API/telegram-api/","title":"\ud83d\udd0c Telegram Bot API Reference","text":"","tags":["api","telegram","documentation","reference"]},{"location":"API/telegram-api/#authentication","title":"Authentication","text":"<p>All API calls require a valid bot token included in the request headers:</p> <pre><code>Authorization: Bot YOUR_BOT_TOKEN\nContent-Type: application/json\n</code></pre>","tags":["api","telegram","documentation","reference"]},{"location":"API/telegram-api/#base-url","title":"Base URL","text":"<pre><code>https://api.telegram.org/bot{token}/\n</code></pre>","tags":["api","telegram","documentation","reference"]},{"location":"API/telegram-api/#core-methods","title":"\ud83d\udcec Core Methods","text":"","tags":["api","telegram","documentation","reference"]},{"location":"API/telegram-api/#send-message","title":"Send Message","text":"<p>Send text messages to users or groups.</p> <pre><code>import requests\n\ndef send_message(chat_id: int, text: str, parse_mode: str = \"HTML\"):\n    url = f\"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage\"\n    payload = {\n        \"chat_id\": chat_id,\n        \"text\": text,\n        \"parse_mode\": parse_mode\n    }\n    response = requests.post(url, json=payload)\n    return response.json()\n</code></pre> <p>Parameters: - <code>chat_id</code> (int): Target chat identifier - <code>text</code> (str): Message content (1-4096 characters) - <code>parse_mode</code> (str): \"HTML\", \"Markdown\", or \"MarkdownV2\"</p>","tags":["api","telegram","documentation","reference"]},{"location":"API/telegram-api/#send-photo","title":"Send Photo","text":"<pre><code>def send_photo(chat_id: int, photo_url: str, caption: str = None):\n    url = f\"https://api.telegram.org/bot{BOT_TOKEN}/sendPhoto\"\n    payload = {\n        \"chat_id\": chat_id,\n        \"photo\": photo_url,\n        \"caption\": caption\n    }\n    response = requests.post(url, json=payload)\n    return response.json()\n</code></pre>","tags":["api","telegram","documentation","reference"]},{"location":"API/telegram-api/#create-forum-topic","title":"Create Forum Topic","text":"<p>Create conversation threads for admin management.</p> <pre><code>def create_forum_topic(chat_id: int, name: str, icon_color: int = 0x6FB9F0):\n    url = f\"https://api.telegram.org/bot{BOT_TOKEN}/createForumTopic\"\n    payload = {\n        \"chat_id\": chat_id,\n        \"name\": name,\n        \"icon_color\": icon_color\n    }\n    response = requests.post(url, json=payload)\n    return response.json()\n</code></pre>","tags":["api","telegram","documentation","reference"]},{"location":"API/telegram-api/#inline-keyboards","title":"\ud83c\udfae Inline Keyboards","text":"","tags":["api","telegram","documentation","reference"]},{"location":"API/telegram-api/#basic-inline-keyboard","title":"Basic Inline Keyboard","text":"<pre><code>def create_inline_keyboard(buttons: list):\n    keyboard = []\n    for row in buttons:\n        keyboard_row = []\n        for button in row:\n            keyboard_row.append({\n                \"text\": button[\"text\"],\n                \"callback_data\": button[\"callback_data\"]\n            })\n        keyboard.append(keyboard_row)\n\n    return {\"inline_keyboard\": keyboard}\n\n# Example usage\nbuttons = [\n    [{\"text\": \"\ud83d\udcb3 Buy 10 Credits ($5)\", \"callback_data\": \"buy_10\"}],\n    [{\"text\": \"\ud83d\udc8e Buy 50 Credits ($20)\", \"callback_data\": \"buy_50\"}],\n    [{\"text\": \"\ud83d\ude80 Buy 100 Credits ($35)\", \"callback_data\": \"buy_100\"}]\n]\n\nkeyboard = create_inline_keyboard(buttons)\n</code></pre>","tags":["api","telegram","documentation","reference"]},{"location":"API/telegram-api/#url-buttons","title":"URL Buttons","text":"<pre><code>def create_url_button(text: str, url: str):\n    return {\n        \"text\": text,\n        \"url\": url\n    }\n\n# Stripe checkout button\ncheckout_button = create_url_button(\n    \"\ud83d\udcb3 Complete Purchase\", \n    \"https://checkout.stripe.com/session_id\"\n)\n</code></pre>","tags":["api","telegram","documentation","reference"]},{"location":"API/telegram-api/#webhook-configuration","title":"\ufffd\ufffd Webhook Configuration","text":"","tags":["api","telegram","documentation","reference"]},{"location":"API/telegram-api/#set-webhook","title":"Set Webhook","text":"<pre><code>def set_webhook(webhook_url: str):\n    url = f\"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook\"\n    payload = {\n        \"url\": webhook_url,\n        \"allowed_updates\": [\"message\", \"callback_query\", \"inline_query\"]\n    }\n    response = requests.post(url, json=payload)\n    return response.json()\n\n# Set your webhook\nset_webhook(\"https://yourapp.railway.app/telegram-webhook\")\n</code></pre>","tags":["api","telegram","documentation","reference"]},{"location":"API/telegram-api/#delete-webhook","title":"Delete Webhook","text":"<pre><code>def delete_webhook():\n    url = f\"https://api.telegram.org/bot{BOT_TOKEN}/deleteWebhook\"\n    response = requests.post(url)\n    return response.json()\n</code></pre>","tags":["api","telegram","documentation","reference"]},{"location":"API/telegram-api/#update-types","title":"\ud83d\udcca Update Types","text":"","tags":["api","telegram","documentation","reference"]},{"location":"API/telegram-api/#message-update","title":"Message Update","text":"<pre><code>{\n  \"update_id\": 123456789,\n  \"message\": {\n    \"message_id\": 1,\n    \"from\": {\n      \"id\": 987654321,\n      \"is_bot\": false,\n      \"first_name\": \"John\",\n      \"username\": \"johndoe\"\n    },\n    \"chat\": {\n      \"id\": 987654321,\n      \"first_name\": \"John\",\n      \"username\": \"johndoe\",\n      \"type\": \"private\"\n    },\n    \"date\": 1640995200,\n    \"text\": \"Hello bot!\"\n  }\n}\n</code></pre>","tags":["api","telegram","documentation","reference"]},{"location":"API/telegram-api/#callback-query-update","title":"Callback Query Update","text":"<pre><code>{\n  \"update_id\": 123456790,\n  \"callback_query\": {\n    \"id\": \"callback_query_id\",\n    \"from\": {\n      \"id\": 987654321,\n      \"is_bot\": false,\n      \"first_name\": \"John\",\n      \"username\": \"johndoe\"\n    },\n    \"data\": \"buy_10\",\n    \"chat_instance\": \"chat_instance_id\"\n  }\n}\n</code></pre>","tags":["api","telegram","documentation","reference"]},{"location":"API/telegram-api/#utility-functions","title":"\ud83d\udee0\ufe0f Utility Functions","text":"","tags":["api","telegram","documentation","reference"]},{"location":"API/telegram-api/#format-credit-balance","title":"Format Credit Balance","text":"<pre><code>def format_balance_bar(current: int, maximum: int, length: int = 10) -&gt; str:\n    \"\"\"Create a visual progress bar for credit balance\"\"\"\n    if maximum == 0:\n        return \"\u2591\" * length\n\n    filled = int((current / maximum) * length)\n    empty = length - filled\n\n    bar = \"\u2588\" * filled + \"\u2591\" * empty\n    percentage = int((current / maximum) * 100)\n\n    return f\"[{bar}] {percentage}% ({current}/{maximum})\"\n\n# Example usage\nbalance_display = format_balance_bar(75, 100)\n# Output: [\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591] 75% (75/100)\n</code></pre>","tags":["api","telegram","documentation","reference"]},{"location":"API/telegram-api/#escape-html","title":"Escape HTML","text":"<pre><code>import html\n\ndef escape_html(text: str) -&gt; str:\n    \"\"\"Escape HTML characters for safe message sending\"\"\"\n    return html.escape(text)\n\n# Usage\nsafe_text = escape_html(\"User input with &lt;special&gt; characters &amp; symbols\")\n</code></pre>","tags":["api","telegram","documentation","reference"]},{"location":"API/telegram-api/#generate-user-info-card","title":"Generate User Info Card","text":"<pre><code>def generate_user_info(user_data: dict) -&gt; str:\n    \"\"\"Generate formatted user information card\"\"\"\n    return f\"\"\"\n\ufffd\ufffd &lt;b&gt;User ID:&lt;/b&gt; {user_data['id']}\n\ud83d\udc64 &lt;b&gt;Name:&lt;/b&gt; {escape_html(user_data['first_name'])}\n\ud83d\udcb0 &lt;b&gt;Credits:&lt;/b&gt; {user_data['credits']}\n\ud83d\udcc5 &lt;b&gt;Joined:&lt;/b&gt; {user_data['created_at'].strftime('%Y-%m-%d')}\n\ud83d\udcb5 &lt;b&gt;Total Spent:&lt;/b&gt; ${user_data['total_spent']:.2f}\n\ud83d\udce8 &lt;b&gt;Messages:&lt;/b&gt; {user_data['message_count']}\n\"\"\"\n</code></pre>","tags":["api","telegram","documentation","reference"]},{"location":"API/telegram-api/#security-best-practices","title":"\ud83d\udd10 Security Best Practices","text":"","tags":["api","telegram","documentation","reference"]},{"location":"API/telegram-api/#webhook-security","title":"Webhook Security","text":"<pre><code>import hmac\nimport hashlib\n\ndef verify_telegram_webhook(request_data: bytes, secret_token: str) -&gt; bool:\n    \"\"\"Verify webhook authenticity\"\"\"\n    # Telegram sends X-Telegram-Bot-Api-Secret-Token header\n    expected_token = secret_token\n    received_token = request.headers.get('X-Telegram-Bot-Api-Secret-Token')\n\n    return hmac.compare_digest(expected_token, received_token or '')\n</code></pre>","tags":["api","telegram","documentation","reference"]},{"location":"API/telegram-api/#rate-limiting","title":"Rate Limiting","text":"<pre><code>from time import time\nfrom collections import defaultdict\n\nclass RateLimiter:\n    def __init__(self, max_requests: int = 30, window: int = 60):\n        self.max_requests = max_requests\n        self.window = window\n        self.requests = defaultdict(list)\n\n    def is_allowed(self, user_id: int) -&gt; bool:\n        now = time()\n        user_requests = self.requests[user_id]\n\n        # Remove old requests outside the window\n        user_requests[:] = [req_time for req_time in user_requests if now - req_time &lt; self.window]\n\n        if len(user_requests) &gt;= self.max_requests:\n            return False\n\n        user_requests.append(now)\n        return True\n\n# Usage\nrate_limiter = RateLimiter(max_requests=20, window=60)\n\nif not rate_limiter.is_allowed(user_id):\n    send_message(user_id, \"\u26a0\ufe0f Rate limit exceeded. Please slow down.\")\n    return\n</code></pre>","tags":["api","telegram","documentation","reference"]},{"location":"API/telegram-api/#error-handling","title":"\ud83d\udcc8 Error Handling","text":"","tags":["api","telegram","documentation","reference"]},{"location":"API/telegram-api/#common-error-codes","title":"Common Error Codes","text":"Code Description Solution 400 Bad Request Check request parameters 401 Unauthorized Verify bot token 403 Forbidden User blocked bot or insufficient permissions 404 Not Found Chat/user doesn't exist 429 Too Many Requests Implement rate limiting 500 Internal Server Error Retry after delay","tags":["api","telegram","documentation","reference"]},{"location":"API/telegram-api/#error-handler","title":"Error Handler","text":"<pre><code>import logging\nfrom functools import wraps\n\ndef handle_telegram_errors(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        try:\n            return func(*args, **kwargs)\n        except Exception as e:\n            logging.error(f\"Telegram API error in {func.__name__}: {e}\")\n            # Implement fallback behavior\n            return {\"ok\": False, \"error\": str(e)}\n    return wrapper\n\n@handle_telegram_errors\ndef send_message_safe(chat_id: int, text: str):\n    return send_message(chat_id, text)\n</code></pre>","tags":["api","telegram","documentation","reference"]},{"location":"API/telegram-api/#external-resources","title":"\ud83d\udd17 External Resources","text":"<ul> <li>Official Telegram Bot API</li> <li>Bot Father Documentation</li> <li>Webhook Guide</li> <li>API Limits and Guidelines</li> </ul>","tags":["api","telegram","documentation","reference"]},{"location":"Documentation/database-schema/","title":"\ud83d\uddc4\ufe0f Database Schema Documentation","text":"","tags":["database","postgresql","schema","documentation"]},{"location":"Documentation/database-schema/#overview","title":"Overview","text":"<p>The database schema is designed for scalability, performance, and data integrity. It supports user management, conversation tracking, payment processing, and comprehensive analytics.</p>","tags":["database","postgresql","schema","documentation"]},{"location":"Documentation/database-schema/#entity-relationship-diagram","title":"\ud83d\udcca Entity Relationship Diagram","text":"<pre><code>erDiagram\n    USERS ||--o{ CONVERSATION_TOPICS : has\n    USERS ||--o{ TRANSACTIONS : makes\n    USERS ||--o{ MESSAGE_LOGS : sends\n    USERS ||--o{ SUBSCRIPTIONS : owns\n    CONVERSATION_TOPICS ||--o{ MESSAGE_LOGS : contains\n    PRODUCTS ||--o{ TRANSACTIONS : sold_as\n\n    USERS {\n        bigint id PK\n        varchar username\n        varchar first_name\n        varchar last_name\n        integer credits\n        timestamp unlimited_until\n        timestamp created_at\n        timestamp last_active\n        decimal total_spent\n        integer message_count\n        boolean is_banned\n        varchar language_code\n        jsonb preferences\n    }\n\n    CONVERSATION_TOPICS {\n        bigint user_id PK\n        integer topic_id\n        bigint group_id PK\n        varchar topic_name\n        timestamp created_at\n        timestamp last_message_at\n        integer message_count\n        boolean is_archived\n    }\n\n    TRANSACTIONS {\n        serial id PK\n        bigint user_id FK\n        varchar stripe_session_id\n        varchar stripe_payment_intent_id\n        decimal amount\n        integer credits_granted\n        integer product_id FK\n        varchar status\n        timestamp created_at\n        timestamp completed_at\n        jsonb metadata\n    }\n\n    MESSAGE_LOGS {\n        serial id PK\n        bigint user_id FK\n        integer topic_id FK\n        varchar message_type\n        integer message_id\n        text content_preview\n        timestamp sent_at\n        boolean is_admin_reply\n        decimal cost\n    }\n\n    PRODUCTS {\n        serial id PK\n        varchar name\n        varchar description\n        decimal price\n        integer credits\n        integer unlimited_days\n        boolean is_active\n        varchar stripe_price_id\n        timestamp created_at\n    }\n\n    SUBSCRIPTIONS {\n        serial id PK\n        bigint user_id FK\n        varchar stripe_subscription_id\n        varchar status\n        timestamp current_period_start\n        timestamp current_period_end\n        timestamp created_at\n        timestamp canceled_at\n    }</code></pre>","tags":["database","postgresql","schema","documentation"]},{"location":"Documentation/database-schema/#table-definitions","title":"\ud83d\udccb Table Definitions","text":"","tags":["database","postgresql","schema","documentation"]},{"location":"Documentation/database-schema/#users-table","title":"Users Table","text":"<p>Primary table for storing user information and account state.</p> <pre><code>CREATE TABLE users (\n    id BIGINT PRIMARY KEY,\n    username VARCHAR(255),\n    first_name VARCHAR(255) NOT NULL,\n    last_name VARCHAR(255),\n    credits INTEGER DEFAULT 0 CHECK (credits &gt;= 0),\n    unlimited_until TIMESTAMP,\n    created_at TIMESTAMP DEFAULT NOW(),\n    last_active TIMESTAMP DEFAULT NOW(),\n    total_spent DECIMAL(10,2) DEFAULT 0 CHECK (total_spent &gt;= 0),\n    message_count INTEGER DEFAULT 0 CHECK (message_count &gt;= 0),\n    is_banned BOOLEAN DEFAULT FALSE,\n    language_code VARCHAR(10) DEFAULT 'en',\n    preferences JSONB DEFAULT '{}'::jsonb\n);\n\n-- Indexes for performance\nCREATE INDEX idx_users_username ON users(username);\nCREATE INDEX idx_users_last_active ON users(last_active DESC);\nCREATE INDEX idx_users_unlimited_until ON users(unlimited_until) WHERE unlimited_until IS NOT NULL;\nCREATE INDEX idx_users_total_spent ON users(total_spent DESC);\n</code></pre>","tags":["database","postgresql","schema","documentation"]},{"location":"Documentation/database-schema/#conversation-topics-table","title":"Conversation Topics Table","text":"<p>Maps users to their conversation threads in admin groups.</p> <pre><code>CREATE TABLE conversation_topics (\n    user_id BIGINT REFERENCES users(id) ON DELETE CASCADE,\n    topic_id INTEGER NOT NULL,\n    group_id BIGINT NOT NULL,\n    topic_name VARCHAR(255) NOT NULL,\n    created_at TIMESTAMP DEFAULT NOW(),\n    last_message_at TIMESTAMP DEFAULT NOW(),\n    message_count INTEGER DEFAULT 0 CHECK (message_count &gt;= 0),\n    is_archived BOOLEAN DEFAULT FALSE,\n    PRIMARY KEY (user_id, group_id)\n);\n\n-- Indexes\nCREATE INDEX idx_conversation_topics_group_topic ON conversation_topics(group_id, topic_id);\nCREATE INDEX idx_conversation_topics_last_message ON conversation_topics(last_message_at DESC);\n</code></pre>","tags":["database","postgresql","schema","documentation"]},{"location":"Documentation/database-schema/#products-table","title":"Products Table","text":"<p>Defines purchasable credit packages and subscription plans.</p> <pre><code>CREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    description TEXT,\n    price DECIMAL(10,2) NOT NULL CHECK (price &gt;= 0),\n    credits INTEGER DEFAULT 0 CHECK (credits &gt;= 0),\n    unlimited_days INTEGER DEFAULT 0 CHECK (unlimited_days &gt;= 0),\n    is_active BOOLEAN DEFAULT TRUE,\n    stripe_price_id VARCHAR(255) UNIQUE,\n    created_at TIMESTAMP DEFAULT NOW(),\n\n    -- Ensure product grants either credits OR unlimited time\n    CONSTRAINT valid_product CHECK (\n        (credits &gt; 0 AND unlimited_days = 0) OR \n        (credits = 0 AND unlimited_days &gt; 0)\n    )\n);\n\n-- Insert default products\nINSERT INTO products (name, description, price, credits, stripe_price_id) VALUES\n('10 Credits', 'Perfect for trying out the service', 5.00, 10, 'price_10credits'),\n('50 Credits', 'Great value for regular users', 20.00, 50, 'price_50credits'),\n('100 Credits', 'Best deal for power users', 35.00, 100, 'price_100credits'),\n('Daily Unlimited', 'Unlimited messages for 24 hours', 9.99, 0, 'price_daily_unlimited');\n\nUPDATE products SET unlimited_days = 1 WHERE name = 'Daily Unlimited';\n</code></pre>","tags":["database","postgresql","schema","documentation"]},{"location":"Documentation/database-schema/#transactions-table","title":"Transactions Table","text":"<p>Records all payment transactions and credit grants.</p> <pre><code>CREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    user_id BIGINT REFERENCES users(id) ON DELETE CASCADE,\n    stripe_session_id VARCHAR(255) UNIQUE,\n    stripe_payment_intent_id VARCHAR(255),\n    amount DECIMAL(10,2) NOT NULL CHECK (amount &gt;= 0),\n    credits_granted INTEGER DEFAULT 0 CHECK (credits_granted &gt;= 0),\n    unlimited_days_granted INTEGER DEFAULT 0 CHECK (unlimited_days_granted &gt;= 0),\n    product_id INTEGER REFERENCES products(id),\n    status VARCHAR(50) DEFAULT 'pending' CHECK (status IN ('pending', 'completed', 'failed', 'refunded')),\n    created_at TIMESTAMP DEFAULT NOW(),\n    completed_at TIMESTAMP,\n    metadata JSONB DEFAULT '{}'::jsonb\n);\n\n-- Indexes\nCREATE INDEX idx_transactions_user_id ON transactions(user_id);\nCREATE INDEX idx_transactions_stripe_session ON transactions(stripe_session_id);\nCREATE INDEX idx_transactions_status ON transactions(status);\nCREATE INDEX idx_transactions_created_at ON transactions(created_at DESC);\n</code></pre>","tags":["database","postgresql","schema","documentation"]},{"location":"Documentation/database-schema/#message-logs-table","title":"Message Logs Table","text":"<p>Tracks all messages for analytics and support.</p> <pre><code>CREATE TABLE message_logs (\n    id SERIAL PRIMARY KEY,\n    user_id BIGINT REFERENCES users(id) ON DELETE CASCADE,\n    topic_id INTEGER,\n    message_type VARCHAR(50) NOT NULL CHECK (message_type IN ('text', 'photo', 'video', 'document', 'voice', 'sticker')),\n    message_id INTEGER NOT NULL,\n    content_preview TEXT, -- First 100 chars for debugging\n    sent_at TIMESTAMP DEFAULT NOW(),\n    is_admin_reply BOOLEAN DEFAULT FALSE,\n    cost DECIMAL(10,2) DEFAULT 1.00 CHECK (cost &gt;= 0)\n);\n\n-- Indexes\nCREATE INDEX idx_message_logs_user_id ON message_logs(user_id);\nCREATE INDEX idx_message_logs_sent_at ON message_logs(sent_at DESC);\nCREATE INDEX idx_message_logs_topic_id ON message_logs(topic_id) WHERE topic_id IS NOT NULL;\n</code></pre>","tags":["database","postgresql","schema","documentation"]},{"location":"Documentation/database-schema/#subscriptions-table","title":"Subscriptions Table","text":"<p>Manages recurring subscription payments.</p> <pre><code>CREATE TABLE subscriptions (\n    id SERIAL PRIMARY KEY,\n    user_id BIGINT REFERENCES users(id) ON DELETE CASCADE,\n    stripe_subscription_id VARCHAR(255) UNIQUE NOT NULL,\n    status VARCHAR(50) NOT NULL CHECK (status IN ('active', 'canceled', 'past_due', 'unpaid')),\n    current_period_start TIMESTAMP NOT NULL,\n    current_period_end TIMESTAMP NOT NULL,\n    created_at TIMESTAMP DEFAULT NOW(),\n    canceled_at TIMESTAMP,\n\n    UNIQUE(user_id, stripe_subscription_id)\n);\n\n-- Indexes\nCREATE INDEX idx_subscriptions_user_id ON subscriptions(user_id);\nCREATE INDEX idx_subscriptions_status ON subscriptions(status);\nCREATE INDEX idx_subscriptions_period_end ON subscriptions(current_period_end);\n</code></pre>","tags":["database","postgresql","schema","documentation"]},{"location":"Documentation/database-schema/#views-and-functions","title":"\ud83d\udd0d Views and Functions","text":"","tags":["database","postgresql","schema","documentation"]},{"location":"Documentation/database-schema/#user-analytics-view","title":"User Analytics View","text":"<pre><code>CREATE VIEW user_analytics AS\nSELECT \n    u.id,\n    u.first_name,\n    u.username,\n    u.credits,\n    u.total_spent,\n    u.message_count,\n    u.created_at,\n    u.last_active,\n    COUNT(t.id) as transaction_count,\n    COALESCE(SUM(t.amount), 0) as lifetime_value,\n    AVG(t.amount) as avg_transaction_value,\n    CASE \n        WHEN u.unlimited_until &gt; NOW() THEN 'unlimited'\n        WHEN u.credits &gt; 0 THEN 'active'\n        ELSE 'inactive'\n    END as account_status\nFROM users u\nLEFT JOIN transactions t ON u.id = t.user_id AND t.status = 'completed'\nGROUP BY u.id;\n</code></pre>","tags":["database","postgresql","schema","documentation"]},{"location":"Documentation/database-schema/#revenue-analytics-view","title":"Revenue Analytics View","text":"<pre><code>CREATE VIEW revenue_analytics AS\nSELECT \n    DATE(created_at) as date,\n    COUNT(*) as transaction_count,\n    SUM(amount) as daily_revenue,\n    AVG(amount) as avg_transaction_value,\n    COUNT(DISTINCT user_id) as unique_customers\nFROM transactions \nWHERE status = 'completed'\nGROUP BY DATE(created_at)\nORDER BY date DESC;\n</code></pre>","tags":["database","postgresql","schema","documentation"]},{"location":"Documentation/database-schema/#active-users-function","title":"Active Users Function","text":"<pre><code>CREATE OR REPLACE FUNCTION get_active_users(days_back INTEGER DEFAULT 30)\nRETURNS TABLE(\n    total_active BIGINT,\n    new_users BIGINT,\n    paying_users BIGINT,\n    total_revenue DECIMAL\n) AS $$\nBEGIN\n    RETURN QUERY\n    SELECT \n        COUNT(DISTINCT u.id) as total_active,\n        COUNT(DISTINCT CASE WHEN u.created_at &gt; NOW() - INTERVAL '1 day' * days_back THEN u.id END) as new_users,\n        COUNT(DISTINCT CASE WHEN t.user_id IS NOT NULL THEN u.id END) as paying_users,\n        COALESCE(SUM(t.amount), 0) as total_revenue\n    FROM users u\n    LEFT JOIN transactions t ON u.id = t.user_id \n        AND t.status = 'completed' \n        AND t.created_at &gt; NOW() - INTERVAL '1 day' * days_back\n    WHERE u.last_active &gt; NOW() - INTERVAL '1 day' * days_back;\nEND;\n$$ LANGUAGE plpgsql;\n</code></pre>","tags":["database","postgresql","schema","documentation"]},{"location":"Documentation/database-schema/#database-functions","title":"\ud83d\udee0\ufe0f Database Functions","text":"","tags":["database","postgresql","schema","documentation"]},{"location":"Documentation/database-schema/#credit-management","title":"Credit Management","text":"<pre><code>-- Add credits to user account\nCREATE OR REPLACE FUNCTION add_user_credits(\n    p_user_id BIGINT,\n    p_credits INTEGER\n) RETURNS BOOLEAN AS $$\nBEGIN\n    UPDATE users \n    SET credits = credits + p_credits,\n        last_active = NOW()\n    WHERE id = p_user_id;\n\n    RETURN FOUND;\nEND;\n$$ LANGUAGE plpgsql;\n\n-- Deduct credits for message\nCREATE OR REPLACE FUNCTION deduct_message_credit(\n    p_user_id BIGINT,\n    p_cost DECIMAL DEFAULT 1.00\n) RETURNS BOOLEAN AS $$\nDECLARE\n    user_credits INTEGER;\n    has_unlimited BOOLEAN;\nBEGIN\n    -- Check if user has unlimited access\n    SELECT \n        credits,\n        (unlimited_until IS NOT NULL AND unlimited_until &gt; NOW())\n    INTO user_credits, has_unlimited\n    FROM users \n    WHERE id = p_user_id;\n\n    -- If unlimited access, no deduction needed\n    IF has_unlimited THEN\n        RETURN TRUE;\n    END IF;\n\n    -- Check if user has enough credits\n    IF user_credits &lt; p_cost THEN\n        RETURN FALSE;\n    END IF;\n\n    -- Deduct credits\n    UPDATE users \n    SET credits = credits - p_cost,\n        message_count = message_count + 1,\n        last_active = NOW()\n    WHERE id = p_user_id;\n\n    RETURN TRUE;\nEND;\n$$ LANGUAGE plpgsql;\n</code></pre>","tags":["database","postgresql","schema","documentation"]},{"location":"Documentation/database-schema/#topic-management","title":"Topic Management","text":"<pre><code>-- Get or create conversation topic\nCREATE OR REPLACE FUNCTION get_or_create_topic(\n    p_user_id BIGINT,\n    p_group_id BIGINT,\n    p_topic_id INTEGER DEFAULT NULL,\n    p_topic_name VARCHAR DEFAULT NULL\n) RETURNS INTEGER AS $$\nDECLARE\n    existing_topic_id INTEGER;\nBEGIN\n    -- Try to get existing topic\n    SELECT topic_id INTO existing_topic_id\n    FROM conversation_topics\n    WHERE user_id = p_user_id AND group_id = p_group_id;\n\n    -- If topic exists, return it\n    IF existing_topic_id IS NOT NULL THEN\n        -- Update last message time\n        UPDATE conversation_topics \n        SET last_message_at = NOW(),\n            message_count = message_count + 1\n        WHERE user_id = p_user_id AND group_id = p_group_id;\n\n        RETURN existing_topic_id;\n    END IF;\n\n    -- Create new topic if provided\n    IF p_topic_id IS NOT NULL THEN\n        INSERT INTO conversation_topics (\n            user_id, topic_id, group_id, topic_name\n        ) VALUES (\n            p_user_id, p_topic_id, p_group_id, \n            COALESCE(p_topic_name, 'User ' || p_user_id)\n        );\n\n        RETURN p_topic_id;\n    END IF;\n\n    -- No topic found and none provided\n    RETURN NULL;\nEND;\n$$ LANGUAGE plpgsql;\n</code></pre>","tags":["database","postgresql","schema","documentation"]},{"location":"Documentation/database-schema/#performance-optimization","title":"\ud83d\udcc8 Performance Optimization","text":"","tags":["database","postgresql","schema","documentation"]},{"location":"Documentation/database-schema/#partitioning-for-large-tables","title":"Partitioning for Large Tables","text":"<pre><code>-- Partition message_logs by month\nCREATE TABLE message_logs_template (\n    LIKE message_logs INCLUDING ALL\n);\n\n-- Create monthly partitions\nCREATE TABLE message_logs_y2024m01 PARTITION OF message_logs_template\nFOR VALUES FROM ('2024-01-01') TO ('2024-02-01');\n\nCREATE TABLE message_logs_y2024m02 PARTITION OF message_logs_template\nFOR VALUES FROM ('2024-02-01') TO ('2024-03-01');\n</code></pre>","tags":["database","postgresql","schema","documentation"]},{"location":"Documentation/database-schema/#query-optimization","title":"Query Optimization","text":"<pre><code>-- Materialized view for dashboard statistics\nCREATE MATERIALIZED VIEW dashboard_stats AS\nSELECT \n    (SELECT COUNT(*) FROM users) as total_users,\n    (SELECT COUNT(*) FROM users WHERE last_active &gt; NOW() - INTERVAL '7 days') as active_users_7d,\n    (SELECT COUNT(*) FROM users WHERE created_at &gt; NOW() - INTERVAL '24 hours') as new_users_24h,\n    (SELECT SUM(amount) FROM transactions WHERE status = 'completed' AND created_at &gt; NOW() - INTERVAL '24 hours') as revenue_24h,\n    (SELECT COUNT(*) FROM message_logs WHERE sent_at &gt; NOW() - INTERVAL '24 hours') as messages_24h;\n\n-- Refresh every hour\nCREATE OR REPLACE FUNCTION refresh_dashboard_stats()\nRETURNS void AS $$\nBEGIN\n    REFRESH MATERIALIZED VIEW dashboard_stats;\nEND;\n$$ LANGUAGE plpgsql;\n</code></pre>","tags":["database","postgresql","schema","documentation"]},{"location":"Documentation/database-schema/#maintenance-tasks","title":"\ud83d\udd27 Maintenance Tasks","text":"","tags":["database","postgresql","schema","documentation"]},{"location":"Documentation/database-schema/#cleanup-old-data","title":"Cleanup Old Data","text":"<pre><code>-- Clean up old message logs (keep 90 days)\nDELETE FROM message_logs \nWHERE sent_at &lt; NOW() - INTERVAL '90 days';\n\n-- Archive inactive conversation topics\nUPDATE conversation_topics \nSET is_archived = TRUE \nWHERE last_message_at &lt; NOW() - INTERVAL '30 days' \nAND is_archived = FALSE;\n</code></pre>","tags":["database","postgresql","schema","documentation"]},{"location":"Documentation/database-schema/#backup-strategy","title":"Backup Strategy","text":"<pre><code>#!/bin/bash\n# Daily backup script\n\n# Full database backup\npg_dump $DATABASE_URL &gt; \"backup_$(date +%Y%m%d_%H%M%S).sql\"\n\n# Table-specific backups for critical data\npg_dump $DATABASE_URL -t users -t transactions &gt; \"critical_backup_$(date +%Y%m%d).sql\"\n\n# Upload to cloud storage\naws s3 cp backup_*.sql s3://your-backup-bucket/telegram-bot/\n</code></pre>","tags":["database","postgresql","schema","documentation"]},{"location":"Documentation/database-schema/#analytics-queries","title":"\ud83d\udcca Analytics Queries","text":"","tags":["database","postgresql","schema","documentation"]},{"location":"Documentation/database-schema/#revenue-analysis","title":"Revenue Analysis","text":"<pre><code>-- Monthly revenue growth\nSELECT \n    DATE_TRUNC('month', created_at) as month,\n    SUM(amount) as revenue,\n    COUNT(*) as transactions,\n    COUNT(DISTINCT user_id) as unique_customers,\n    LAG(SUM(amount)) OVER (ORDER BY DATE_TRUNC('month', created_at)) as prev_month_revenue,\n    ROUND(\n        (SUM(amount) - LAG(SUM(amount)) OVER (ORDER BY DATE_TRUNC('month', created_at))) \n        / LAG(SUM(amount)) OVER (ORDER BY DATE_TRUNC('month', created_at)) * 100, 2\n    ) as growth_percentage\nFROM transactions \nWHERE status = 'completed'\nGROUP BY DATE_TRUNC('month', created_at)\nORDER BY month DESC;\n</code></pre>","tags":["database","postgresql","schema","documentation"]},{"location":"Documentation/database-schema/#user-engagement","title":"User Engagement","text":"<pre><code>-- User engagement metrics\nSELECT \n    DATE(sent_at) as date,\n    COUNT(DISTINCT user_id) as active_users,\n    COUNT(*) as total_messages,\n    ROUND(COUNT(*)::DECIMAL / COUNT(DISTINCT user_id), 2) as avg_messages_per_user,\n    COUNT(CASE WHEN is_admin_reply THEN 1 END) as admin_replies,\n    ROUND(\n        COUNT(CASE WHEN is_admin_reply THEN 1 END)::DECIMAL / \n        COUNT(CASE WHEN NOT is_admin_reply THEN 1 END) * 100, 2\n    ) as response_rate_percent\nFROM message_logs \nWHERE sent_at &gt; NOW() - INTERVAL '30 days'\nGROUP BY DATE(sent_at)\nORDER BY date DESC;\n</code></pre> <p>Database Version: PostgreSQL 15+ Last Updated: 2025-01-27 Schema Version: 1.0.0</p>","tags":["database","postgresql","schema","documentation"]},{"location":"Guides/deployment/","title":"\ud83d\ude80 Deployment Guide","text":"","tags":["deployment","docker","railway","production"]},{"location":"Guides/deployment/#overview","title":"Overview","text":"<p>This guide covers deploying your Telegram bot to production using Docker and Railway. The setup includes automatic scaling, monitoring, and secure environment management.</p>","tags":["deployment","docker","railway","production"]},{"location":"Guides/deployment/#docker-configuration","title":"\ud83d\udc33 Docker Configuration","text":"","tags":["deployment","docker","railway","production"]},{"location":"Guides/deployment/#dockerfile","title":"Dockerfile","text":"<pre><code># Use Python 3.11 slim image\nFROM python:3.11-slim\n\n# Set working directory\nWORKDIR /app\n\n# Install system dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    gcc \\\n    libpq-dev \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Copy requirements first for better caching\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy application code\nCOPY src/ ./src/\nCOPY scripts/ ./scripts/\n\n# Create non-root user for security\nRUN useradd --create-home --shell /bin/bash app\nUSER app\n\n# Expose port\nEXPOSE 8000\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n    CMD curl -f http://localhost:8000/health || exit 1\n\n# Start the application\nCMD [\"gunicorn\", \"--bind\", \"0.0.0.0:8000\", \"--workers\", \"2\", \"--timeout\", \"30\", \"src.webhook_server:app\"]\n</code></pre>","tags":["deployment","docker","railway","production"]},{"location":"Guides/deployment/#docker-compose-development","title":"Docker Compose (Development)","text":"<pre><code>version: '3.8'\n\nservices:\n  bot:\n    build: .\n    ports:\n      - \"8000:8000\"\n    environment:\n      - DATABASE_URL=postgresql://user:password@db:5432/telegram_bot\n      - BOT_TOKEN=${BOT_TOKEN}\n      - STRIPE_API_KEY=${STRIPE_API_KEY}\n    depends_on:\n      - db\n    volumes:\n      - ./src:/app/src\n\n  db:\n    image: postgres:15-alpine\n    environment:\n      - POSTGRES_DB=telegram_bot\n      - POSTGRES_USER=user\n      - POSTGRES_PASSWORD=password\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n\nvolumes:\n  postgres_data:\n</code></pre>","tags":["deployment","docker","railway","production"]},{"location":"Guides/deployment/#railway-deployment","title":"\ud83d\ude84 Railway Deployment","text":"","tags":["deployment","docker","railway","production"]},{"location":"Guides/deployment/#step-1-prepare-repository","title":"Step 1: Prepare Repository","text":"<pre><code># Ensure your repository has these files:\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 src/\n\u2514\u2500\u2500 scripts/\n</code></pre>","tags":["deployment","docker","railway","production"]},{"location":"Guides/deployment/#step-2-railway-setup","title":"Step 2: Railway Setup","text":"<ol> <li> <p>Connect Repository: <pre><code># Install Railway CLI\nnpm install -g @railway/cli\n\n# Login and connect\nrailway login\nrailway link\n</code></pre></p> </li> <li> <p>Configure Environment Variables: <pre><code># Set required environment variables\nrailway variables set BOT_TOKEN=\"your_bot_token\"\nrailway variables set STRIPE_API_KEY=\"sk_live_...\"\nrailway variables set STRIPE_WEBHOOK_SECRET=\"whsec_...\"\nrailway variables set DATABASE_URL=\"postgresql://...\"\nrailway variables set ADMIN_GROUP_ID=\"-1001234567890\"\n</code></pre></p> </li> </ol>","tags":["deployment","docker","railway","production"]},{"location":"Guides/deployment/#step-3-database-setup","title":"Step 3: Database Setup","text":"<pre><code># Add PostgreSQL service\nrailway add postgresql\n\n# Run database setup script\nrailway run python scripts/setup_db.py\n</code></pre>","tags":["deployment","docker","railway","production"]},{"location":"Guides/deployment/#step-4-deploy","title":"Step 4: Deploy","text":"<pre><code># Deploy to production\nrailway up\n</code></pre>","tags":["deployment","docker","railway","production"]},{"location":"Guides/deployment/#environment-configuration","title":"\ud83d\udd27 Environment Configuration","text":"","tags":["deployment","docker","railway","production"]},{"location":"Guides/deployment/#required-environment-variables","title":"Required Environment Variables","text":"Variable Description Example <code>BOT_TOKEN</code> Telegram bot token from BotFather <code>1234567890:AAE...</code> <code>DATABASE_URL</code> PostgreSQL connection string <code>postgresql://user:pass@host:5432/db</code> <code>STRIPE_API_KEY</code> Stripe secret key <code>sk_live_...</code> <code>STRIPE_WEBHOOK_SECRET</code> Stripe webhook signing secret <code>whsec_...</code> <code>ADMIN_GROUP_ID</code> Telegram admin group ID <code>-1001234567890</code> <code>ENVIRONMENT</code> Deployment environment <code>production</code>","tags":["deployment","docker","railway","production"]},{"location":"Guides/deployment/#example-env-file","title":"Example .env File","text":"<pre><code># Telegram Configuration\nBOT_TOKEN=1234567890:AAE...\nADMIN_GROUP_ID=-1001234567890\n\n# Database Configuration\nDATABASE_URL=postgresql://username:password@localhost:5432/telegram_bot\n\n# Stripe Configuration\nSTRIPE_API_KEY=sk_live_...\nSTRIPE_WEBHOOK_SECRET=whsec_...\n\n# Application Configuration\nENVIRONMENT=production\nLOG_LEVEL=INFO\nWEBHOOK_URL=https://yourapp.railway.app\n</code></pre>","tags":["deployment","docker","railway","production"]},{"location":"Guides/deployment/#ssltls-configuration","title":"\ud83d\udd10 SSL/TLS Configuration","text":"","tags":["deployment","docker","railway","production"]},{"location":"Guides/deployment/#automatic-https-with-railway","title":"Automatic HTTPS with Railway","text":"<p>Railway automatically provides SSL certificates for your domain:</p> <pre><code># webhook_server.py\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/health')\ndef health_check():\n    return {\"status\": \"healthy\", \"timestamp\": datetime.utcnow().isoformat()}\n\nif __name__ == '__main__':\n    # Railway handles SSL termination\n    app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 8000)))\n</code></pre>","tags":["deployment","docker","railway","production"]},{"location":"Guides/deployment/#custom-domain-setup","title":"Custom Domain Setup","text":"<ol> <li>Add Custom Domain in Railway Dashboard</li> <li> <p>Update DNS Records: <pre><code>Type: CNAME\nName: bot (or your subdomain)\nValue: your-app.railway.app\n</code></pre></p> </li> <li> <p>Update Webhook URL: <pre><code>webhook_url = \"https://bot.yourdomain.com/telegram-webhook\"\n</code></pre></p> </li> </ol>","tags":["deployment","docker","railway","production"]},{"location":"Guides/deployment/#monitoring-logging","title":"\ud83d\udcca Monitoring &amp; Logging","text":"","tags":["deployment","docker","railway","production"]},{"location":"Guides/deployment/#health-check-endpoint","title":"Health Check Endpoint","text":"<pre><code>from flask import Flask, jsonify\nfrom datetime import datetime\nimport psycopg2\n\n@app.route('/health')\ndef health_check():\n    try:\n        # Check database connection\n        conn = get_db_connection()\n        cursor = conn.cursor()\n        cursor.execute(\"SELECT 1\")\n        cursor.close()\n        conn.close()\n\n        return jsonify({\n            \"status\": \"healthy\",\n            \"timestamp\": datetime.utcnow().isoformat(),\n            \"database\": \"connected\"\n        }), 200\n    except Exception as e:\n        return jsonify({\n            \"status\": \"unhealthy\",\n            \"error\": str(e),\n            \"timestamp\": datetime.utcnow().isoformat()\n        }), 500\n</code></pre>","tags":["deployment","docker","railway","production"]},{"location":"Guides/deployment/#logging-configuration","title":"Logging Configuration","text":"<pre><code>import logging\nimport sys\n\ndef setup_logging():\n    logging.basicConfig(\n        level=logging.INFO,\n        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n        handlers=[\n            logging.StreamHandler(sys.stdout),\n            logging.FileHandler('bot.log')\n        ]\n    )\n\n# Usage\nsetup_logging()\nlogger = logging.getLogger(__name__)\n</code></pre>","tags":["deployment","docker","railway","production"]},{"location":"Guides/deployment/#railway-metrics","title":"Railway Metrics","text":"<p>Monitor your deployment through Railway dashboard: - CPU Usage: Keep below 80% - Memory Usage: Monitor for memory leaks - Response Time: Target &lt;2 seconds - Error Rate: Keep below 1%</p>","tags":["deployment","docker","railway","production"]},{"location":"Guides/deployment/#cicd-pipeline","title":"\ud83d\udd04 CI/CD Pipeline","text":"","tags":["deployment","docker","railway","production"]},{"location":"Guides/deployment/#github-actions","title":"GitHub Actions","text":"<pre><code>name: Deploy to Railway\n\non:\n  push:\n    branches: [main]\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Install Railway CLI\n        run: npm install -g @railway/cli\n\n      - name: Deploy to Railway\n        run: railway up --detach\n        env:\n          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}\n</code></pre>","tags":["deployment","docker","railway","production"]},{"location":"Guides/deployment/#pre-deployment-checks","title":"Pre-deployment Checks","text":"<pre><code>#!/bin/bash\n# deploy.sh\n\necho \"\ud83d\udd0d Running pre-deployment checks...\"\n\n# Test database connection\npython -c \"\nimport os\nimport psycopg2\nconn = psycopg2.connect(os.environ['DATABASE_URL'])\nprint('\u2705 Database connection successful')\nconn.close()\n\"\n\n# Validate environment variables\npython -c \"\nimport os\nrequired_vars = ['BOT_TOKEN', 'STRIPE_API_KEY', 'DATABASE_URL']\nfor var in required_vars:\n    if not os.environ.get(var):\n        print(f'\u274c Missing required variable: {var}')\n        exit(1)\nprint('\u2705 All environment variables present')\n\"\n\n# Run tests\npython -m pytest tests/ -v\n\necho \"\u2705 Pre-deployment checks passed!\"\n</code></pre>","tags":["deployment","docker","railway","production"]},{"location":"Guides/deployment/#troubleshooting","title":"\ud83d\udea8 Troubleshooting","text":"","tags":["deployment","docker","railway","production"]},{"location":"Guides/deployment/#common-issues","title":"Common Issues","text":"Issue Symptoms Solution Bot not responding Messages not received Check webhook URL and SSL certificate Database connection failed 500 errors Verify DATABASE_URL and network connectivity Stripe webhooks failing Payments not processed Check webhook secret and endpoint URL High memory usage App restarts frequently Implement connection pooling and caching","tags":["deployment","docker","railway","production"]},{"location":"Guides/deployment/#debug-commands","title":"Debug Commands","text":"<pre><code># Check webhook status\ncurl -X GET \"https://api.telegram.org/bot${BOT_TOKEN}/getWebhookInfo\"\n\n# Test health endpoint\ncurl https://yourapp.railway.app/health\n\n# View logs\nrailway logs\n\n# Connect to database\nrailway connect postgresql\n</code></pre>","tags":["deployment","docker","railway","production"]},{"location":"Guides/deployment/#performance-optimization","title":"Performance Optimization","text":"<pre><code># Connection pooling for database\nfrom psycopg2 import pool\n\nclass DatabasePool:\n    def __init__(self):\n        self.connection_pool = psycopg2.pool.SimpleConnectionPool(\n            1, 20,  # min and max connections\n            host=DB_HOST,\n            database=DB_NAME,\n            user=DB_USER,\n            password=DB_PASSWORD\n        )\n\n    def get_connection(self):\n        return self.connection_pool.getconn()\n\n    def return_connection(self, connection):\n        self.connection_pool.putconn(connection)\n\n# Redis caching for frequent queries\nimport redis\n\nredis_client = redis.Redis(\n    host='localhost',\n    port=6379,\n    decode_responses=True\n)\n\ndef get_user_cached(user_id):\n    cache_key = f\"user:{user_id}\"\n    cached_user = redis_client.get(cache_key)\n\n    if cached_user:\n        return json.loads(cached_user)\n\n    user = get_user_from_db(user_id)\n    redis_client.setex(cache_key, 300, json.dumps(user))  # 5 min cache\n    return user\n</code></pre>","tags":["deployment","docker","railway","production"]},{"location":"Guides/deployment/#deployment-checklist","title":"\ud83d\udccb Deployment Checklist","text":"<ul> <li>[ ] \u2705 Environment variables configured</li> <li>[ ] \u2705 Database schema deployed</li> <li>[ ] \u2705 SSL certificate active</li> <li>[ ] \u2705 Webhook URL updated</li> <li>[ ] \u2705 Health checks passing</li> <li>[ ] \u2705 Stripe webhooks configured</li> <li>[ ] \u2705 Monitoring alerts set up</li> <li>[ ] \u2705 Backup strategy implemented</li> <li>[ ] \u2705 Error tracking configured</li> <li>[ ] \u2705 Performance baseline established</li> </ul> <p>Next Steps: Monitor your deployment \u2022 Set up alerts</p>","tags":["deployment","docker","railway","production"]},{"location":"Projects/project-blueprint/","title":"\ud83e\udd16 Project Blueprint: Enterprise Telegram Bot","text":"","tags":["telegram","bot","enterprise","monetization","python"]},{"location":"Projects/project-blueprint/#project-vision-core-purpose","title":"\ud83c\udfaf Project Vision &amp; Core Purpose","text":"<p>Goal: To build an enterprise-grade Telegram bot that transforms a Telegram channel into a comprehensive business and communication platform.</p>","tags":["telegram","bot","enterprise","monetization","python"]},{"location":"Projects/project-blueprint/#key-functions","title":"Key Functions:","text":"<ul> <li>\ud83d\udcb0 Monetization Engine: Sophisticated system for selling services via Stripe</li> <li>Smart credit system</li> <li>Time-based access</li> <li>Pay-to-unlock premium content</li> <li>Auto-recharge subscriptions</li> <li>\ud83d\udc65 Admin Conversation Management: Topic-based system in private admin group</li> <li>\ud83d\udcca Business Intelligence: Advanced analytics on revenue and user engagement</li> </ul>","tags":["telegram","bot","enterprise","monetization","python"]},{"location":"Projects/project-blueprint/#core-principles","title":"Core Principles:","text":"<ul> <li>\u2705 Scalable - Handle thousands of concurrent users</li> <li>\u2705 Reliable - 99.9% uptime with proper error handling</li> <li>\u2705 Modular - Clean, maintainable codebase</li> <li>\u2705 Secure - Webhook-based, encrypted communications</li> </ul>","tags":["telegram","bot","enterprise","monetization","python"]},{"location":"Projects/project-blueprint/#tech-stack-key-libraries","title":"\ud83d\udd27 Tech Stack &amp; Key Libraries","text":"Component Technology Version Language Python 3.11+ Framework Flask + Gunicorn Latest Telegram <code>python-telegram-bot[ext]</code> 21.x+ Database PostgreSQL 15+ DB Driver <code>psycopg2-binary</code> Latest Payments Stripe API Latest Environment <code>python-dotenv</code> Latest Deployment Docker + Railway -","tags":["telegram","bot","enterprise","monetization","python"]},{"location":"Projects/project-blueprint/#project-architecture","title":"\ud83d\udcc1 Project Architecture","text":"<pre><code>telegram_bot/\n\u251c\u2500\u2500 \ud83d\udcc1 src/                    # Core application logic\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 bot.py                 # Main bot handlers and logic\n\u2502   \u251c\u2500\u2500 database.py            # Database connection and queries\n\u2502   \u251c\u2500\u2500 config.py              # Environment variable management\n\u2502   \u251c\u2500\u2500 error_handler.py       # Global error handling\n\u2502   \u251c\u2500\u2500 cache.py               # Caching layer\n\u2502   \u251c\u2500\u2500 webhook_server.py      # Flask/Gunicorn server\n\u2502   \u2514\u2500\u2500 stripe_utils.py        # Stripe API functions\n\u251c\u2500\u2500 \ud83d\udcc1 scripts/                # One-off scripts\n\u2502   \u2514\u2500\u2500 setup_db.py\n\u251c\u2500\u2500 \ud83d\udcc1 deployment/             # Deployment files\n\u2502   \u2514\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 \ud83d\udcc1 docs/                   # Documentation\n\u2502   \u251c\u2500\u2500 PROJECT_BLUEPRINT.md\n\u2502   \u2514\u2500\u2500 schema.sql\n\u251c\u2500\u2500 .env                       # Environment variables\n\u251c\u2500\u2500 .gitignore\n\u2514\u2500\u2500 requirements.txt\n</code></pre>","tags":["telegram","bot","enterprise","monetization","python"]},{"location":"Projects/project-blueprint/#implementation-phases","title":"\ud83d\ude80 Implementation Phases","text":"","tags":["telegram","bot","enterprise","monetization","python"]},{"location":"Projects/project-blueprint/#phase-1-initial-setup","title":"Phase 1: Initial Setup \u26a1","text":"<ol> <li>Initialize Git repository</li> <li>Create <code>.gitignore</code> with Python and <code>.env</code> entries</li> <li>Create full folder structure</li> <li>Set up <code>requirements.txt</code> with all dependencies</li> </ol>","tags":["telegram","bot","enterprise","monetization","python"]},{"location":"Projects/project-blueprint/#phase-2-database-configuration","title":"Phase 2: Database &amp; Configuration \ud83d\uddc4\ufe0f","text":"<ol> <li>Create <code>docs/schema.sql</code> - Complete database schema</li> <li>Create <code>src/config.py</code> - Environment variable loading</li> <li>Create <code>src/database.py</code> - Connection pool implementation</li> <li>Create <code>scripts/setup_db.py</code> - Database initialization</li> </ol>","tags":["telegram","bot","enterprise","monetization","python"]},{"location":"Projects/project-blueprint/#phase-3-core-bot-logic","title":"Phase 3: Core Bot Logic \ud83e\udde0","text":"<ol> <li>User Commands Implementation:</li> <li><code>/start</code> - Onboarding with product showcase</li> <li><code>/balance</code> - Visual credit/time display</li> <li><code>/billing</code> - Stripe customer portal</li> <li> <p>Quick-buy commands (<code>/buy10</code>, <code>/buy50</code>)</p> </li> <li> <p>Admin Conversation Bridge:</p> </li> <li>Topic-based message routing</li> <li>User-to-admin forwarding</li> <li>Admin-to-user responses</li> <li>Real-time status updates</li> </ol>","tags":["telegram","bot","enterprise","monetization","python"]},{"location":"Projects/project-blueprint/#phase-4-webhook-server-payments","title":"Phase 4: Webhook Server &amp; Payments \ud83d\udcb3","text":"<ol> <li>Flask Application Setup:</li> <li><code>/telegram-webhook</code> endpoint</li> <li><code>/stripe-webhook</code> endpoint (with signature verification)</li> <li> <p><code>/health</code> monitoring endpoint</p> </li> <li> <p>Stripe Integration:</p> </li> <li>Checkout session creation</li> <li>Payment confirmation handling</li> <li>Subscription management</li> <li>Billing portal access</li> </ol>","tags":["telegram","bot","enterprise","monetization","python"]},{"location":"Projects/project-blueprint/#phase-5-production-deployment","title":"Phase 5: Production Deployment \ud83c\udf10","text":"<ol> <li>Docker Configuration:</li> <li>Multi-stage build process</li> <li>Production-ready Gunicorn setup</li> <li> <p>Health checks and monitoring</p> </li> <li> <p>Railway Deployment:</p> </li> <li>Environment variable configuration</li> <li>Database connection setup</li> <li>SSL/TLS certificate management</li> </ol>","tags":["telegram","bot","enterprise","monetization","python"]},{"location":"Projects/project-blueprint/#database-schema-overview","title":"\ud83d\udccb Database Schema Overview","text":"<pre><code>-- Users table with comprehensive tracking\nCREATE TABLE users (\n    id BIGINT PRIMARY KEY,\n    username VARCHAR(255),\n    first_name VARCHAR(255),\n    credits INTEGER DEFAULT 0,\n    unlimited_until TIMESTAMP,\n    created_at TIMESTAMP DEFAULT NOW(),\n    last_active TIMESTAMP DEFAULT NOW(),\n    total_spent DECIMAL(10,2) DEFAULT 0,\n    message_count INTEGER DEFAULT 0\n);\n\n-- Conversation topics for admin management\nCREATE TABLE conversation_topics (\n    user_id BIGINT REFERENCES users(id),\n    topic_id INTEGER,\n    group_id BIGINT,\n    created_at TIMESTAMP DEFAULT NOW(),\n    PRIMARY KEY (user_id, group_id)\n);\n\n-- Transaction tracking for analytics\nCREATE TABLE transactions (\n    id SERIAL PRIMARY KEY,\n    user_id BIGINT REFERENCES users(id),\n    stripe_session_id VARCHAR(255) UNIQUE,\n    amount DECIMAL(10,2),\n    credits_granted INTEGER,\n    status VARCHAR(50),\n    created_at TIMESTAMP DEFAULT NOW()\n);\n</code></pre>","tags":["telegram","bot","enterprise","monetization","python"]},{"location":"Projects/project-blueprint/#key-features-showcase","title":"\ud83d\udd25 Key Features Showcase","text":"","tags":["telegram","bot","enterprise","monetization","python"]},{"location":"Projects/project-blueprint/#smart-credit-system","title":"Smart Credit System","text":"<ul> <li>Flexible Pricing: Multiple credit packages (10, 50, 100, 500 credits)</li> <li>Auto-Recharge: Set up recurring payments for power users  </li> <li>Bonus Credits: Loyalty rewards and promotional campaigns</li> <li>Usage Analytics: Detailed spending and usage patterns</li> </ul>","tags":["telegram","bot","enterprise","monetization","python"]},{"location":"Projects/project-blueprint/#admin-dashboard","title":"Admin Dashboard","text":"<ul> <li>Real-time Monitoring: Live user activity and system health</li> <li>Revenue Analytics: Daily, weekly, monthly earning reports</li> <li>User Management: Quick actions for credits, bans, and support</li> <li>Conversation Insights: Message volume and response times</li> </ul>","tags":["telegram","bot","enterprise","monetization","python"]},{"location":"Projects/project-blueprint/#enterprise-security","title":"Enterprise Security","text":"<ul> <li>Webhook Verification: Stripe signature validation</li> <li>Rate Limiting: Protection against spam and abuse</li> <li>Error Handling: Graceful degradation and recovery</li> <li>Audit Logging: Complete transaction and interaction history</li> </ul>","tags":["telegram","bot","enterprise","monetization","python"]},{"location":"Projects/project-blueprint/#success-metrics","title":"\ud83c\udfaf Success Metrics","text":"Metric Target Description Uptime 99.9% System availability Response Time &lt;2s Message processing speed Revenue $10k/month Monthly recurring revenue User Retention 80% 30-day active users Conversion Rate 15% Free to paid conversion","tags":["telegram","bot","enterprise","monetization","python"]},{"location":"Projects/project-blueprint/#quick-links","title":"\ud83d\udd17 Quick Links","text":"<ul> <li>API Documentation</li> <li>Deployment Guide</li> <li>Database Schema</li> <li>Stripe Integration</li> </ul> <p>Next Steps: Review technical requirements \u2192 Set up development environment \u2192 Begin Phase 1 implementation</p>","tags":["telegram","bot","enterprise","monetization","python"]},{"location":"Projects/TelegramBot/app-summary/","title":"\ud83d\udcac Telegram Bot for Paid Messaging","text":"","tags":["telegram","monetization","creators","messaging"]},{"location":"Projects/TelegramBot/app-summary/#overview","title":"Overview","text":"<p>I've built a Telegram bot that lets creators monetize 1-on-1 conversations with their fans. Here's how it works:</p>","tags":["telegram","monetization","creators","messaging"]},{"location":"Projects/TelegramBot/app-summary/#key-features","title":"\u2728 Key Features","text":"","tags":["telegram","monetization","creators","messaging"]},{"location":"Projects/TelegramBot/app-summary/#easy-setup","title":"\ud83d\ude80 Easy Setup","text":"<p>Creators set up the bot to offer paid messaging services right inside Telegram.</p>","tags":["telegram","monetization","creators","messaging"]},{"location":"Projects/TelegramBot/app-summary/#seamless-fan-experience","title":"\ud83d\udc65 Seamless Fan Experience","text":"<ul> <li>Fans open the bot and get a welcome message</li> <li>Quick interactive tutorial</li> <li>Free credits to start chatting immediately</li> </ul>","tags":["telegram","monetization","creators","messaging"]},{"location":"Projects/TelegramBot/app-summary/#unique-conversation-threads","title":"\ud83d\udd04 Unique Conversation Threads","text":"<p>When a fan sends a message, the bot: 1. Routes it to a private Telegram group 2. Creates a dedicated thread for each fan 3. Allows creators/admins to reply in threads 4. Sends responses back to fans automatically</p> <p>This creates the feeling of a live, private chat experience.</p>","tags":["telegram","monetization","creators","messaging"]},{"location":"Projects/TelegramBot/app-summary/#credit-based-monetization","title":"\ud83d\udcb0 Credit-Based Monetization","text":"Feature Description Per-Message Cost Each message costs 1 credit Balance Checking <code>/balance</code> command shows remaining credits Stripe Integration Seamless credit purchasing Low Balance Alerts Automatic reminders when credits run low Special Packages Daily unlimited plans for power users","tags":["telegram","monetization","creators","messaging"]},{"location":"Projects/TelegramBot/app-summary/#user-friendly-commands","title":"\ud83c\udfae User-Friendly Commands","text":"<pre><code>/start     - Welcome message and tutorial\n/balance   - Check credit balance with visual indicator\n/buy       - Purchase more credits via Stripe\n/help      - Command reference and support\n/status    - Usage analytics and account info\n</code></pre>","tags":["telegram","monetization","creators","messaging"]},{"location":"Projects/TelegramBot/app-summary/#robust-error-handling","title":"\ud83d\udee1\ufe0f Robust Error Handling","text":"<p>The bot is designed to: - Handle errors smoothly - Ensure reliable user experience - Provide helpful error messages - Log issues for debugging</p>","tags":["telegram","monetization","creators","messaging"]},{"location":"Projects/TelegramBot/app-summary/#use-cases","title":"\ud83d\udca1 Use Cases","text":"<p>Perfect for creators who want to offer: - \u2705 Exclusive, monetized conversations - \u2705 Premium support channels - \u2705 NSFW or adult content interactions - \u2705 Personal coaching and advice - \u2705 Celebrity fan interactions</p>","tags":["telegram","monetization","creators","messaging"]},{"location":"Projects/TelegramBot/app-summary/#technical-architecture","title":"\ud83c\udfd7\ufe0f Technical Architecture","text":"<pre><code>graph TD\n    A[Fan sends message] --&gt; B[Bot receives message]\n    B --&gt; C[Check user credits]\n    C --&gt; D{Has credits?}\n    D --&gt;|Yes| E[Forward to admin group thread]\n    D --&gt;|No| F[Show purchase options]\n    E --&gt; G[Admin replies in thread]\n    G --&gt; H[Bot forwards reply to fan]\n    H --&gt; I[Deduct 1 credit]\n    F --&gt; J[Stripe checkout]\n    J --&gt; K[Credits added to account]</code></pre>","tags":["telegram","monetization","creators","messaging"]},{"location":"Projects/TelegramBot/app-summary/#business-model","title":"\ud83c\udfaf Business Model","text":"<p>Think of it as a Telegram-based paid chat platform - great for creators who want to: - Generate recurring revenue from fan interactions - Provide exclusive access to their time and attention - Scale personal interactions efficiently - Build deeper relationships with paying supporters</p> <p>Status: \u2705 Production Ready Tech Stack: Python, Telegram Bot API, Stripe, PostgreSQL Deployment: Docker + Railway</p>","tags":["telegram","monetization","creators","messaging"]}]}